// Assets/4. Scripts/Generated/Editor/AdvancedUIMenuGenerator.cs
#if UNITY_EDITOR
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;

[InitializeOnLoad]
internal static class AdvancedUIMenuGenerator
{
    private const string kOutputPath = "Assets/4. Scripts/Generated/Editor/AdvancedUIMenuItems.cs";
    private const string kMenuRoot = "GameObject/";

    // ---------- entry points ----------
    static AdvancedUIMenuGenerator() => Rebuild();
    [MenuItem("Tools/UI/Rebuild Advanced UI Menu", false, 100)]
    private static void ForceRebuildFromMenu() => Rebuild(true);

    // ---------- auto-refresh on catalog change ----------
    private class CatalogPost : AssetPostprocessor
    {
        static void OnPostprocessAllAssets(string[] imp, string[] del, string[] mov, string[] movFrom)
        {
            bool touched = imp.Concat(del).Concat(mov).Concat(movFrom)
                               .Any(p => p.EndsWith(".asset") &&
                                         AssetDatabase.GetMainAssetTypeAtPath(p) == typeof(AdvancedUIPrefabCatalog));
            if (touched) Rebuild();
        }
    }

    // ---------- helpers ----------
    private static IEnumerable<AdvancedUIPrefabCatalog> Catalogs() =>
        AssetDatabase.FindAssets("t:AdvancedUIPrefabCatalog")
                     .Select(AssetDatabase.GUIDToAssetPath)
                     .Select(p => AssetDatabase.LoadAssetAtPath<AdvancedUIPrefabCatalog>(p));

    internal static void Rebuild(bool forceDelete = false)
    {
        if (forceDelete && File.Exists(kOutputPath))
            File.Delete(kOutputPath);

        // 1. collect category → order map  (lowest number wins if duplicates)
        var categoryOrder = new Dictionary<string, int>();
        foreach (var cat in Catalogs())
            foreach (var co in cat.categoryOrders)
            {
                if (categoryOrder.TryGetValue(co.category, out int existing))
                    categoryOrder[co.category] = Mathf.Min(existing, co.order);
                else
                    categoryOrder.Add(co.category, co.order);
            }

        // 2. generate source
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("using UnityEditor;");
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine("using UnityEngine.SceneManagement;");
        sb.AppendLine("static class AdvancedUIMenuItems {");

        int methodIndex = 0;

        // group *all* entries by category first
        var allEntries = Catalogs()
                        .SelectMany(c => c.entries.Where(e => e.prefab));
        foreach (var catGroup in allEntries
                                .GroupBy(e => e.category)
                                .OrderBy(g => categoryOrder.TryGetValue(g.Key, out var o) ? o : int.MaxValue)  // category order
                                .ThenBy(g => g.Key))                                                             // tie-break alphabetically
        {
            int basePriority = (categoryOrder.TryGetValue(catGroup.Key, out int o) ? o : 1000) * 100;            // leave gaps of 100
            int insideIndex = 0;

            foreach (var e in catGroup.OrderBy(e => e.orderInCategory)
                                      .ThenBy(e => e.displayName))
            {
                string menuPath = $"{kMenuRoot}{e.category}/{e.displayName}";
                string methodName = $"Create_{methodIndex++}";
                string prefabGuid = AssetDatabase.AssetPathToGUID(AssetDatabase.GetAssetPath(e.prefab));
                int priority = basePriority + insideIndex++;

                sb.AppendLine($@"    [MenuItem(""{menuPath}"", false, {priority})]");
                sb.AppendLine($@"    static void {methodName}(MenuCommand cmd) {{");
                // ---------- NEW CONTEXT-AWARE INSTANTIATION ----------
                sb.AppendLine($@"        var prefab = AssetDatabase.LoadAssetAtPath<GameObject>(" +
                               $@"AssetDatabase.GUIDToAssetPath(""{prefabGuid}""));");
                sb.AppendLine($@"        var parent = cmd.context as GameObject;");                 // object you right-clicked
                sb.AppendLine($@"        GameObject go = parent != null");
                sb.AppendLine($@"            ? (GameObject)PrefabUtility.InstantiatePrefab(prefab, parent.transform)");
                sb.AppendLine($@"            : (GameObject)PrefabUtility.InstantiatePrefab(prefab, SceneManager.GetActiveScene());");
                sb.AppendLine($@"        Undo.RegisterCreatedObjectUndo(go, ""Create {e.displayName}"");");
                sb.AppendLine($@"        Selection.activeObject = go;");
                sb.AppendLine("    }");
            }
        }

        sb.AppendLine("}");
        sb.AppendLine("// </auto-generated>");

        // 3. write only if changed
        Directory.CreateDirectory(Path.GetDirectoryName(kOutputPath));
        if (!File.Exists(kOutputPath) || File.ReadAllText(kOutputPath) != sb.ToString())
        {
            File.WriteAllText(kOutputPath, sb.ToString());
            AssetDatabase.Refresh();
        }
    }
}
#endif
