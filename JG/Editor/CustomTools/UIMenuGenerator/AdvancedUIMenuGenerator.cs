// Assets/Editor/AdvancedUIMenuGenerator.cs
#if UNITY_EDITOR
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEditor.SceneManagement;
using UnityEngine;

[InitializeOnLoad]
internal static class AdvancedUIMenuGenerator
{
    private const string kOutputPath = "Assets/4. Scripts/Generated/Editor/AdvancedUIMenuItems.cs";
    private const string kMenuRoot = "GameObject/";

    static AdvancedUIMenuGenerator() => RebuildIfNeeded();

    // Re-run whenever an asset is imported, deleted, or moved
    class CatalogPostprocessor : AssetPostprocessor
    {
        static void OnPostprocessAllAssets(
            string[] imported, string[] deleted, string[] moved, string[] movedFrom)
        {
            bool anyCatalog =
                imported.Any(IsCatalog) || deleted.Any(IsCatalog) ||
                moved.Any(IsCatalog) || movedFrom.Any(IsCatalog);
            if (anyCatalog) RebuildIfNeeded();
        }
        static bool IsCatalog(string path) =>
            path.EndsWith(".asset") &&
            AssetDatabase.GetMainAssetTypeAtPath(path) == typeof(AdvancedUIPrefabCatalog);
    }

    private static void RebuildIfNeeded()
    {
        // Build code
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("using UnityEditor;");
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine("using UnityEngine.SceneManagement;");
        sb.AppendLine("static class AdvancedUIMenuItems {");

        var catalogs = AssetDatabase.FindAssets("t:AdvancedUIPrefabCatalog")
                                    .Select(AssetDatabase.GUIDToAssetPath)
                                    .Select(p => AssetDatabase.LoadAssetAtPath<AdvancedUIPrefabCatalog>(p));

        int methodIndex = 0;
        foreach (var catalog in catalogs)
        {
            foreach (var e in catalog.entries.Where(en => en.prefab != null))
            {
                string menuPath = $"{kMenuRoot}{e.category}/{e.displayName}";
                string method = $"Create_{methodIndex++}";
                string prefabGuid = AssetDatabase.AssetPathToGUID(AssetDatabase.GetAssetPath(e.prefab));

                sb.AppendLine($@"    [MenuItem(""{menuPath}"", false, 20)]");
                sb.AppendLine($@"    static void {method}(MenuCommand cmd) {{");
                sb.AppendLine($@"        var prefab = AssetDatabase.LoadAssetAtPath<GameObject>(AssetDatabase.GUIDToAssetPath(""{prefabGuid}""));");
                sb.AppendLine($@"        var instance = (GameObject)PrefabUtility.InstantiatePrefab(prefab, SceneManager.GetActiveScene());");
                sb.AppendLine($@"        Undo.RegisterCreatedObjectUndo(instance, ""Create {e.displayName}"");");
                sb.AppendLine($@"        Selection.activeObject = instance;");
                sb.AppendLine("    }");
            }
        }

        sb.AppendLine("}");
        sb.AppendLine("// </auto-generated>");

        // Write only if changed (avoid recompile loop)
        Directory.CreateDirectory(Path.GetDirectoryName(kOutputPath));
        if (!File.Exists(kOutputPath) || File.ReadAllText(kOutputPath) != sb.ToString())
        {
            File.WriteAllText(kOutputPath, sb.ToString());
            AssetDatabase.Refresh();
        }
    }
}
#endif
